const express = require("express");
const multer = require("multer");
const path = require("path");

const app = express();
const upload = multer({
  dest: "uploads/", // destination folder to store the uploaded file
  fileFilter: (req, file, cb) => {
    const fileTypes = /jpeg|jpg|png|gif/;
    const extname = fileTypes.test(
      path.extname(file.originalname).toLowerCase()
    );
    const mimetype = fileTypes.test(file.mimetype);
    if (extname && mimetype) {
      cb(null, true);
    } else {
      cb(
        new Error(
          "Invalid file type. Only jpeg, jpg, png and gif files are allowed."
        )
      );
    }
  },
});

app.post("/profile", upload.single("profilePicture"), (req, res, next) => {
  // req.file contains information about the uploaded file
  // Process the uploaded file and store it in your server's file system
  res.send("Profile picture uploaded successfully.");
});

app.listen(3000, () => {
  console.log("Server started on port 3000");
});
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
const path = require("path");

const fullPath = path.join("/users", "john", "documents", "file.txt");
console.log(fullPath); // Output: /users/john/documents/file.txt
/***************************************************************************************************************************************/
const path = require("path");

const fullPath = path.resolve("app.js");
console.log(fullPath); // Output: /Users/yourusername/Documents/node-app/app.js

/***************************************************************************************************************************************/
const path = require("path");

const dirname = path.dirname("/users/john/documents/file.txt");
console.log(dirname); // Output: /users/john/documents

/***************************************************************************************************************************************/
const path = require("path");

const filename = path.basename("/users/john/documents/file.txt");
console.log(filename); // Output: file.txt

const filenameWithoutExt = path.basename(
  "/users/john/documents/file.txt",
  ".txt"
);
console.log(filenameWithoutExt); // Output: file

/***************************************************************************************************************************************/
const path = require("path");

const extname = path.extname("/users/john/documents/file.txt");
console.log(extname); // Output: .txt

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
const { fileURLToPath } = require("url");

const fileUrl = new URL("file:///path/to/file.txt");
const filePath = fileURLToPath(fileUrl);

console.log(filePath); // Output: /path/to/file.txt

/***************************************************************************************************************************************/
const url = require("url");

const fileUrl = "file:///path/to/file.txt";
const parsedUrl = url.parse(fileUrl);
const filePath = decodeURIComponent(parsedUrl.pathname);

console.log(filePath); // Output: /path/to/file.txt

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
const promise1 = Promise.resolve("Hello");
const promise2 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("world");
  }, 1000);
});
const promise3 = fetch("https://api.github.com/users/octocat");

Promise.all([promise1, promise2, promise3])
  .then(([result1, result2, result3]) => {
    console.log(result1 + " " + result2); // Output: Hello world
    console.log(result3); // Output: Response object for the GitHub user 'octocat'
  })
  .catch((error) => {
    console.error(error);
  });

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
const apiUrl1 = "https://api.example.com/data1";
const apiUrl2 = "https://api.example.com/data2";

const promise1 = fetch(apiUrl1);
const promise2 = fetch(apiUrl2);

Promise.all([promise1, promise2])
  .then(([response1, response2]) =>
    Promise.all([response1.json(), response2.json()])
  )
  .then(([data1, data2]) => {
    // process data1 and data2 together
  })
  .catch((error) => {
    console.error(error);
  });

/***************************************************************************************************************************************/
const file1 = document.querySelector("#file1").files[0];
const file2 = document.querySelector("#file2").files[0];

const uploadPromise1 = uploadFile(file1);
const uploadPromise2 = uploadFile(file2);

Promise.all([uploadPromise1, uploadPromise2])
  .then(() => {
    console.log("All files uploaded successfully");
  })
  .catch((error) => {
    console.error("Error uploading files:", error);
  });

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/

/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
/***************************************************************************************************************************************/
